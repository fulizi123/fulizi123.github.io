<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/05/hello-world/"/>
    <url>/2024/07/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ORB-SLAM2代码学习笔记-Tracking线程</title>
    <link href="/2019/11/21/%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/11/21/%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="ORB-SLAM2代码学习笔记-Tracking线程"><a href="#ORB-SLAM2代码学习笔记-Tracking线程" class="headerlink" title="ORB-SLAM2代码学习笔记-Tracking线程"></a>ORB-SLAM2代码学习笔记-Tracking线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><code>python</code> 你知道</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><ul><li>列表项1</li><li>列表项2</li><li>列表项3</li></ul><ol><li>列表项1</li><li>列表项2</li><li>列表项3</li></ol><hr><h3 id="Frame类"><a href="#Frame类" class="headerlink" title="Frame类"></a>Frame类</h3><h4 id="isInFrustum成员函数：用于判断地图点是否在当前相机视野内"><a href="#isInFrustum成员函数：用于判断地图点是否在当前相机视野内" class="headerlink" title="isInFrustum成员函数：用于判断地图点是否在当前相机视野内"></a><code>isInFrustum</code>成员函数：用于判断地图点是否在当前相机视野内</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++">以下为伪代码<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Frame::isInFrustum</span><span class="hljs-params">(MapPoint *pMP, <span class="hljs-type">float</span> viewingCosLimit)</span></span><br><span class="hljs-function"></span>&#123;<br>    P = pMP-&gt;<span class="hljs-built_in">GetWorldPos</span>(); <span class="hljs-comment">//世界坐标</span><br>    cv::Mat Pc = mRcw*P+mtcw;  <span class="hljs-comment">//相机坐标</span><br><br>    <span class="hljs-keyword">if</span>(PcZ&lt;<span class="hljs-number">0.0f</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//1.深度值需要为正</span><br><br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> invz = <span class="hljs-number">1.0f</span>/PcZ;<br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> u=fx*PcX*invz+cx;<br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> v=fy*PcY*invz+cy;<br>    <span class="hljs-keyword">if</span>(u&lt;mnMinX || u&gt;mnMaxX) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(v&lt;mnMinY || v&gt;mnMaxY) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//2.在图像内才可继续</span><br><br>    <span class="hljs-type">const</span> cv::Mat PO = P-mOw;  <span class="hljs-comment">//mOw为相机光心坐标</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> dist = cv::<span class="hljs-built_in">norm</span>(PO); <span class="hljs-comment">//取模就得到了距离</span><br>    <span class="hljs-keyword">if</span>(dist&lt;minDistance || dist&gt;maxDistance)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//3.如果不在有效距离范围内，认为投影不可靠</span><br><br>    cv::Mat Pn = pMP-&gt;<span class="hljs-built_in">GetNormal</span>();<span class="hljs-comment">//平均观测方向</span><br>    <span class="hljs-type">float</span> viewCos = PO.<span class="hljs-built_in">dot</span>(Pn)/dist; <span class="hljs-comment">//两个单位向量做点积，得到夹角余弦值</span><br>    <span class="hljs-keyword">if</span>(viewCos&lt;viewingCosLimit) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//4.如果小于60度不要了</span><br><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nPredictedLevel = pMP-&gt;<span class="hljs-built_in">PredictScale</span>(dist,<span class="hljs-keyword">this</span>);<span class="hljs-comment">//根据到光心距离计算一个尺度</span><br>    <span class="hljs-comment">//笔记：根据这个函数可以推断，ORB-SLAM2的尺度是和距离相关的，地图点距离越近，尺度越大</span><br><br>    <span class="hljs-comment">//记录参数</span><br>    <span class="hljs-comment">// 通过置位标记 MapPoint::mbTrackInView 来表示这个地图点要被投影 </span><br>    pMP-&gt;mbTrackInView = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 该地图点投影在当前图像（一般是左图）的像素横坐标</span><br>    pMP-&gt;mTrackProjX = u;<br>    <span class="hljs-comment">// bf/z其实是视差，相减得到右图（如有）中对应点的横坐标</span><br>    pMP-&gt;mTrackProjXR = u - mbf*invz; <br><span class="hljs-comment">// 该地图点投影在当前图像（一般是左图）的像素纵坐标</span><br>    pMP-&gt;mTrackProjY = v;<br>    <span class="hljs-comment">// 根据地图点到光心距离，预测的该地图点的尺度层级</span><br>    pMP-&gt;mnTrackScaleLevel = nPredictedLevel;<br>    <span class="hljs-comment">// 保存当前相机指向地图点向量和地图点的平均观测方向夹角的余弦值</span><br>    pMP-&gt;mTrackViewCos = viewCos;<br>    <span class="hljs-comment">//执行到这里说明这个地图点在相机的视野中并且进行重投影是可靠的，返回true</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GetFeaturesInArea成员函数：用于根据地图点筛选图像中对应的特征点"><a href="#GetFeaturesInArea成员函数：用于根据地图点筛选图像中对应的特征点" class="headerlink" title="GetFeaturesInArea成员函数：用于根据地图点筛选图像中对应的特征点"></a><code>GetFeaturesInArea</code>成员函数：用于根据地图点筛选图像中对应的特征点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++">以下为伪代码<br><span class="hljs-function">vector&lt;<span class="hljs-type">size_t</span>&gt; <span class="hljs-title">Frame::GetFeaturesInArea</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> &amp;x, <span class="hljs-type">const</span> <span class="hljs-type">float</span>  &amp;y, <span class="hljs-type">const</span> <span class="hljs-type">float</span>  &amp;r, <span class="hljs-type">const</span> <span class="hljs-type">int</span> minLevel, <span class="hljs-type">const</span> <span class="hljs-type">int</span> maxLevel)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">size_t</span>&gt; vIndices;<span class="hljs-comment">//存储结果</span><br>    <br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nMinCellX = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,(<span class="hljs-type">int</span>)<span class="hljs-built_in">floor</span>( (x-mnMinX-r)*mfGridElementWidthInv));<span class="hljs-comment">//计算左边界的格子坐标（mfGridElementWidthInv表示每个像素等于几个网格）</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nMaxCellX = <span class="hljs-built_in">min</span>((<span class="hljs-type">int</span>)FRAME_GRID_COLS<span class="hljs-number">-1</span>, (<span class="hljs-type">int</span>)<span class="hljs-built_in">ceil</span>((x-mnMinX+r)*mfGridElementWidthInv));<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nMinCellY = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,(<span class="hljs-type">int</span>)<span class="hljs-built_in">floor</span>((y-mnMinY-r)*mfGridElementHeightInv));<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nMaxCellY = <span class="hljs-built_in">min</span>((<span class="hljs-type">int</span>)FRAME_GRID_ROWS<span class="hljs-number">-1</span>,(<span class="hljs-type">int</span>)<span class="hljs-built_in">ceil</span>((y-mnMinY+r)*mfGridElementHeightInv));<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> ix = nMinCellX; ix&lt;=nMaxCellX; ix++)<span class="hljs-comment">//遍历所有可能的格子</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> iy = nMinCellY; iy&lt;=nMaxCellY; iy++)<br>        &#123;<br>            <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">size_t</span>&gt; vCell = mGrid[ix][iy];<span class="hljs-comment">//获取格子中的特征点索引</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> j=<span class="hljs-number">0</span>, jend=vCell.<span class="hljs-built_in">size</span>(); j&lt;jend; j++)<span class="hljs-comment">//遍历可能的特征点</span><br>            &#123;<br>                <span class="hljs-type">const</span> cv::KeyPoint &amp;kpUn = mvKeysUn[vCell[j]];<br>                <span class="hljs-keyword">if</span>(kpUn.octave&lt;minLevel)    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(kpUn.octave&gt;maxLevel)    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//验证特征点金字塔层级是否合法</span><br>                <span class="hljs-type">const</span> <span class="hljs-type">float</span> distx = kpUn.pt.x-x;<br>                <span class="hljs-type">const</span> <span class="hljs-type">float</span> disty = kpUn.pt.y-y;<br>                <span class="hljs-keyword">if</span>(distx*distx + disty*disty &lt; r*r) <span class="hljs-comment">// 最后验证一下距离是否在圆形搜索区域内</span><br>                    vIndices.<span class="hljs-built_in">push_back</span>(vCell[j]);<br><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> vIndices;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ORBmatcher类"><a href="#ORBmatcher类" class="headerlink" title="ORBmatcher类"></a>ORBmatcher类</h3><h4 id="SearchByProjection成员函数"><a href="#SearchByProjection成员函数" class="headerlink" title="SearchByProjection成员函数"></a><code>SearchByProjection</code>成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++">以下为伪代码<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ORBmatcher::SearchByProjection</span><span class="hljs-params">(Frame &amp;F, <span class="hljs-type">const</span> vector&lt;MapPoint*&gt; &amp;vpMapPoints, <span class="hljs-type">const</span> <span class="hljs-type">float</span> th)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> iMP=<span class="hljs-number">0</span>; iMP&lt;vpMapPoints.<span class="hljs-built_in">size</span>(); iMP++)<span class="hljs-comment">//遍历有效地图点</span><br>    &#123;<br>        MapPoint* pMP = vpMapPoints[iMP];<br>        <span class="hljs-keyword">if</span>(!pMP-&gt;mbTrackInView)    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//这个是判断地图点可见性</span><br>        <span class="hljs-keyword">if</span>(pMP-&gt;<span class="hljs-built_in">isBad</span>())    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//这个应该是局部建图线程操作的</span><br>        <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
