<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pytorch学习笔记</title>
    <link href="/2024/09/25/Pytorch%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/25/Pytorch%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="loss-backward-和优化器更新参数"><a href="#loss-backward-和优化器更新参数" class="headerlink" title="loss.backward()和优化器更新参数"></a>loss.backward()和优化器更新参数</h2><h3 id="loss-backward"><a href="#loss-backward" class="headerlink" title="loss.backward()"></a>loss.backward()</h3><p>用于自动求导的函数，它的主要作用是计算损失函数对模型参数的梯度，从而实现反向传播算法。在深度学习中，我们通常使用梯度下降算法来更新模型参数，使得模型能够逐步逼近最优解。在梯度下降算法中，我们需要计算损失函数关于模型参数的梯度，以便确定参数更新的方向和大小。这个计算过程就是反向传播算法，而 loss.backward() 就是反向传播算法的实现。</p><p>具体来说，loss.backward() 的作用是对损失函数进行求导，得到每个模型参数关于损失函数的梯度。这个梯度可以表示模型参数在当前状态下对损失函数的贡献大小和方向，即参数更新的方向和大小。通过梯度下降算法，我们可以根据这个梯度调整模型参数，使得损失函数逐渐减小，模型性能逐渐提升。</p><p>需要注意的是，loss.backward() 仅计算当前批次中的梯度，并不修改模型参数。如果需要更新模型参数，还需要调用优化器的 step() 方法，根据计算得到的梯度更新模型参数。</p><p>这一步会计算所有变量x的梯度值：$\frac{\delta loss}{\delta x}$，并将其累积为$x \times grad$ 所用，即$x \times grad &#x3D; (x \times grad)_pre + \frac{\delta loss}{\delta x}$</p><hr><h3 id="loss-backward-1"><a href="#loss-backward-1" class="headerlink" title="loss.backward()"></a>loss.backward()</h3><p>用于更新梯度的函数。当我们使用 backward() 计算网络参数的梯度后，我们需要使用 optimizer.step() 来根据梯度更新网络参数的值。</p><p>具体来说，optimizer.step() 根据优化算法的规则，将梯度应用于网络参数。例如，常用的优化算法如 Adam、SGD 等，都有自己的更新规则，optimizer.step() 会按照相应的规则更新网络参数的值。更新后的参数将被用于下一次的前向传递计算和反向传播计算。</p><h3 id="optimizer-zero-grad"><a href="#optimizer-zero-grad" class="headerlink" title="optimizer.zero_grad()"></a>optimizer.zero_grad()</h3><p>用于清空优化器中的梯度。通常，在进行一次反向传播计算之前，我们需要先清空优化器中的梯度。具体来说，optimizer.zero_grad() 会将优化器中所有可学习参数的梯度设为 0。这样，在下一次前向传递计算和反向传播计算时，之前的梯度就不会对当前的梯度产生影响。</p><hr><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> torch<br> <br><span class="hljs-comment"># 初始化参数值x</span><br>x = torch.tensor([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>], requires_grad=<span class="hljs-literal">True</span>)<br> <br><span class="hljs-comment"># 模拟网络运算，计算输出值y</span><br>y = <span class="hljs-number">100</span>*x<br><br><span class="hljs-comment"># 定义优化器</span><br>optim = torch.optim.SGD([x], lr = <span class="hljs-number">0.001</span>) <span class="hljs-comment"># SGD, lr = 0.001</span><br><br><span class="hljs-comment"># 清空梯度</span><br>optim.zero_grad()<br><br><span class="hljs-comment"># 定义损失</span><br>loss = y.<span class="hljs-built_in">sum</span>() <br> <br><span class="hljs-comment"># 进行反向传播</span><br>loss.backward()  <span class="hljs-comment"># 计算梯度grad, 更新 x*grad    </span><br>  <br>optim.step()  <span class="hljs-comment"># 更新x</span><br></code></pre></td></tr></table></figure><hr><h2 id="PyTorch：-train-和-eval-模式"><a href="#PyTorch：-train-和-eval-模式" class="headerlink" title="PyTorch：.train() 和 .eval() 模式"></a>PyTorch：.train() 和 .eval() 模式</h2><p>PyTorch 作为一个广泛使用的深度学习框架，在训练和推理时提供了两种主要的模型模式：.train() 和 .eval()。</p><p>在 PyTorch 中，使用 model.eval() 的主要目的是通知模型进入评估模式。这对于某些特定类型的层是非常重要的，比如 BatchNorm 和 Dropout 层，它们在训练和评估阶段的行为是不同的。要注意的是：model.eval() 模式并不会影响梯度的计算。PyTorch 仍会计算梯度，除非你使用 with torch.no_grad(): 上下文管理器。所以，如果你在 .eval() 模式下调用 .backward()，梯度会被计算。(网络上普遍的关于调用.eval()后只计算梯度，不进行反向传播的说法是有问题的，因为.eval()和.train()和反向传播没有关系，是否进行反向传播取决于有没有调用.backward())</p><p>在没有特殊层（如 BN 和 Dropout）的情况下，.train() 和 .eval() 模式下的训练结果完全一致。这表明在这种特定情境下，两种模式下的模型行为并没有区别。</p><p><strong>但是由于大部分网络结构包含BatchNorm 和 Dropout 层，所以网络推理时记得把模式设置为.eval() 模式，且不需要进行反向传播更新梯度，所以可以用with torch.no_grad():</strong></p><hr><h2 id="模型从pytorch转换到onnx格式"><a href="#模型从pytorch转换到onnx格式" class="headerlink" title="模型从pytorch转换到onnx格式"></a>模型从pytorch转换到onnx格式</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ORB-SLAM2代码学习笔记-Tracking线程</title>
    <link href="/2024/09/25/%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/25/%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="ORB-SLAM2代码学习笔记-Tracking线程"><a href="#ORB-SLAM2代码学习笔记-Tracking线程" class="headerlink" title="ORB-SLAM2代码学习笔记-Tracking线程"></a>ORB-SLAM2代码学习笔记-Tracking线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><code>python</code> 你知道</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p><ul><li>列表项1</li><li>列表项2</li><li>列表项3</li></ul><ol><li>列表项1</li><li>列表项2</li><li>列表项3</li></ol><hr><h3 id="Frame类"><a href="#Frame类" class="headerlink" title="Frame类"></a>Frame类</h3><h4 id="isInFrustum成员函数：用于判断地图点是否在当前相机视野内"><a href="#isInFrustum成员函数：用于判断地图点是否在当前相机视野内" class="headerlink" title="isInFrustum成员函数：用于判断地图点是否在当前相机视野内"></a><code>isInFrustum</code>成员函数：用于判断地图点是否在当前相机视野内</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++">以下为伪代码<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Frame::isInFrustum</span><span class="hljs-params">(MapPoint *pMP, <span class="hljs-type">float</span> viewingCosLimit)</span></span><br><span class="hljs-function"></span>&#123;<br>    P = pMP-&gt;<span class="hljs-built_in">GetWorldPos</span>(); <span class="hljs-comment">//世界坐标</span><br>    cv::Mat Pc = mRcw*P+mtcw;  <span class="hljs-comment">//相机坐标</span><br><br>    <span class="hljs-keyword">if</span>(PcZ&lt;<span class="hljs-number">0.0f</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//1.深度值需要为正</span><br><br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> invz = <span class="hljs-number">1.0f</span>/PcZ;<br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> u=fx*PcX*invz+cx;<br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> v=fy*PcY*invz+cy;<br>    <span class="hljs-keyword">if</span>(u&lt;mnMinX || u&gt;mnMaxX) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(v&lt;mnMinY || v&gt;mnMaxY) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//2.在图像内才可继续</span><br><br>    <span class="hljs-type">const</span> cv::Mat PO = P-mOw;  <span class="hljs-comment">//mOw为相机光心坐标</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> dist = cv::<span class="hljs-built_in">norm</span>(PO); <span class="hljs-comment">//取模就得到了距离</span><br>    <span class="hljs-keyword">if</span>(dist&lt;minDistance || dist&gt;maxDistance)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//3.如果不在有效距离范围内，认为投影不可靠</span><br><br>    cv::Mat Pn = pMP-&gt;<span class="hljs-built_in">GetNormal</span>();<span class="hljs-comment">//平均观测方向</span><br>    <span class="hljs-type">float</span> viewCos = PO.<span class="hljs-built_in">dot</span>(Pn)/dist; <span class="hljs-comment">//两个单位向量做点积，得到夹角余弦值</span><br>    <span class="hljs-keyword">if</span>(viewCos&lt;viewingCosLimit) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//4.如果小于60度不要了</span><br><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nPredictedLevel = pMP-&gt;<span class="hljs-built_in">PredictScale</span>(dist,<span class="hljs-keyword">this</span>);<span class="hljs-comment">//根据到光心距离计算一个尺度</span><br>    <span class="hljs-comment">//笔记：根据这个函数可以推断，ORB-SLAM2的尺度是和距离相关的，地图点距离越近，尺度越大</span><br><br>    <span class="hljs-comment">//记录参数</span><br>    <span class="hljs-comment">// 通过置位标记 MapPoint::mbTrackInView 来表示这个地图点要被投影 </span><br>    pMP-&gt;mbTrackInView = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 该地图点投影在当前图像（一般是左图）的像素横坐标</span><br>    pMP-&gt;mTrackProjX = u;<br>    <span class="hljs-comment">// bf/z其实是视差，相减得到右图（如有）中对应点的横坐标</span><br>    pMP-&gt;mTrackProjXR = u - mbf*invz; <br><span class="hljs-comment">// 该地图点投影在当前图像（一般是左图）的像素纵坐标</span><br>    pMP-&gt;mTrackProjY = v;<br>    <span class="hljs-comment">// 根据地图点到光心距离，预测的该地图点的尺度层级</span><br>    pMP-&gt;mnTrackScaleLevel = nPredictedLevel;<br>    <span class="hljs-comment">// 保存当前相机指向地图点向量和地图点的平均观测方向夹角的余弦值</span><br>    pMP-&gt;mTrackViewCos = viewCos;<br>    <span class="hljs-comment">//执行到这里说明这个地图点在相机的视野中并且进行重投影是可靠的，返回true</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GetFeaturesInArea成员函数：用于根据地图点筛选图像中对应的特征点"><a href="#GetFeaturesInArea成员函数：用于根据地图点筛选图像中对应的特征点" class="headerlink" title="GetFeaturesInArea成员函数：用于根据地图点筛选图像中对应的特征点"></a><code>GetFeaturesInArea</code>成员函数：用于根据地图点筛选图像中对应的特征点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++">以下为伪代码<br><span class="hljs-function">vector&lt;<span class="hljs-type">size_t</span>&gt; <span class="hljs-title">Frame::GetFeaturesInArea</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> &amp;x, <span class="hljs-type">const</span> <span class="hljs-type">float</span>  &amp;y, <span class="hljs-type">const</span> <span class="hljs-type">float</span>  &amp;r, <span class="hljs-type">const</span> <span class="hljs-type">int</span> minLevel, <span class="hljs-type">const</span> <span class="hljs-type">int</span> maxLevel)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">size_t</span>&gt; vIndices;<span class="hljs-comment">//存储结果</span><br>    <br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nMinCellX = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,(<span class="hljs-type">int</span>)<span class="hljs-built_in">floor</span>( (x-mnMinX-r)*mfGridElementWidthInv));<span class="hljs-comment">//计算左边界的格子坐标（mfGridElementWidthInv表示每个像素等于几个网格）</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nMaxCellX = <span class="hljs-built_in">min</span>((<span class="hljs-type">int</span>)FRAME_GRID_COLS<span class="hljs-number">-1</span>, (<span class="hljs-type">int</span>)<span class="hljs-built_in">ceil</span>((x-mnMinX+r)*mfGridElementWidthInv));<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nMinCellY = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,(<span class="hljs-type">int</span>)<span class="hljs-built_in">floor</span>((y-mnMinY-r)*mfGridElementHeightInv));<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> nMaxCellY = <span class="hljs-built_in">min</span>((<span class="hljs-type">int</span>)FRAME_GRID_ROWS<span class="hljs-number">-1</span>,(<span class="hljs-type">int</span>)<span class="hljs-built_in">ceil</span>((y-mnMinY+r)*mfGridElementHeightInv));<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> ix = nMinCellX; ix&lt;=nMaxCellX; ix++)<span class="hljs-comment">//遍历所有可能的格子</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> iy = nMinCellY; iy&lt;=nMaxCellY; iy++)<br>        &#123;<br>            <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">size_t</span>&gt; vCell = mGrid[ix][iy];<span class="hljs-comment">//获取格子中的特征点索引</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> j=<span class="hljs-number">0</span>, jend=vCell.<span class="hljs-built_in">size</span>(); j&lt;jend; j++)<span class="hljs-comment">//遍历可能的特征点</span><br>            &#123;<br>                <span class="hljs-type">const</span> cv::KeyPoint &amp;kpUn = mvKeysUn[vCell[j]];<br>                <span class="hljs-keyword">if</span>(kpUn.octave&lt;minLevel)    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(kpUn.octave&gt;maxLevel)    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//验证特征点金字塔层级是否合法</span><br>                <span class="hljs-type">const</span> <span class="hljs-type">float</span> distx = kpUn.pt.x-x;<br>                <span class="hljs-type">const</span> <span class="hljs-type">float</span> disty = kpUn.pt.y-y;<br>                <span class="hljs-keyword">if</span>(distx*distx + disty*disty &lt; r*r) <span class="hljs-comment">// 最后验证一下距离是否在圆形搜索区域内</span><br>                    vIndices.<span class="hljs-built_in">push_back</span>(vCell[j]);<br><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> vIndices;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ORBmatcher类"><a href="#ORBmatcher类" class="headerlink" title="ORBmatcher类"></a>ORBmatcher类</h3><h4 id="SearchByProjection成员函数"><a href="#SearchByProjection成员函数" class="headerlink" title="SearchByProjection成员函数"></a><code>SearchByProjection</code>成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C++">以下为伪代码<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ORBmatcher::SearchByProjection</span><span class="hljs-params">(Frame &amp;F, <span class="hljs-type">const</span> vector&lt;MapPoint*&gt; &amp;vpMapPoints, <span class="hljs-type">const</span> <span class="hljs-type">float</span> th)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> iMP=<span class="hljs-number">0</span>; iMP&lt;vpMapPoints.<span class="hljs-built_in">size</span>(); iMP++)<span class="hljs-comment">//遍历有效地图点</span><br>    &#123;<br>        MapPoint* pMP = vpMapPoints[iMP];<br>        <span class="hljs-keyword">if</span>(!pMP-&gt;mbTrackInView)    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//这个是判断地图点可见性</span><br>        <span class="hljs-keyword">if</span>(pMP-&gt;<span class="hljs-built_in">isBad</span>())    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//这个应该是局部建图线程操作的</span><br><br>        <span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;nPredictedLevel = pMP-&gt;mnTrackScaleLevel;<span class="hljs-comment">//地图点估计的尺度</span><br>        <span class="hljs-type">float</span> r = <span class="hljs-built_in">RadiusByViewingCos</span>(pMP-&gt;mTrackViewCos);<span class="hljs-comment">//搜索窗口的大小</span><br>        <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">size_t</span>&gt; vIndices =<br>            F.<span class="hljs-built_in">GetFeaturesInArea</span>(pMP-&gt;mTrackProjX,pMP-&gt;mTrackProjY,      <span class="hljs-comment">// 该地图点投影到当前帧上的坐标</span><br>                                    r*F.mvScaleFactors[nPredictedLevel],    <span class="hljs-comment">// 特征点被追踪到的尺度</span><br>                                    nPredictedLevel<span class="hljs-number">-1</span>,nPredictedLevel);     <span class="hljs-comment">// 搜索的图层范围</span><br>        <span class="hljs-type">const</span> cv::Mat MPdescriptor = pMP-&gt;<span class="hljs-built_in">GetDescriptor</span>();<span class="hljs-comment">//地图点描述子</span><br>        <span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">size_t</span>&gt;::const_iterator vit=vIndices.<span class="hljs-built_in">begin</span>(); vit!=vIndices.<span class="hljs-built_in">end</span>(); vit++)&#123;<br>            <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> idx = *vit;<br>            <span class="hljs-keyword">if</span>(F.mvpMapPoints[idx]) <span class="hljs-comment">//如果特征点有对应的地图点</span><br>                <span class="hljs-keyword">if</span>(F.mvpMapPoints[idx]-&gt;<span class="hljs-built_in">Observations</span>()&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//如果地图点有观测</span><br>                    <span class="hljs-keyword">continue</span>;<br>            <br>            <span class="hljs-type">const</span> cv::Mat &amp;d = F.mDescriptors.<span class="hljs-built_in">row</span>(idx);<br>            <span class="hljs-type">const</span> <span class="hljs-type">int</span> dist = <span class="hljs-built_in">DescriptorDistance</span>(MPdescriptor,d);<span class="hljs-comment">//计算描述子距离</span><br><br>            <span class="hljs-keyword">if</span>(dist&lt;bestDist)<br>            &#123;<br>                bestDist2=bestDist;<br>                bestDist=dist;<br>                bestLevel2 = bestLevel;<br>                bestLevel = F.mvKeysUn[idx].octave;<br>                bestIdx=idx;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dist&lt;bestDist2)<br>            &#123;<br>                bestLevel2 = F.mvKeysUn[idx].octave;<br>                bestDist2=dist;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(bestDist&lt;=TH_HIGH)<br>        &#123;<br>            <span class="hljs-comment">// 条件1：bestLevel==bestLevel2 表示 最佳和次佳在同一金字塔层级</span><br>            <span class="hljs-comment">// 条件2：bestDist&gt;mfNNratio*bestDist2 表示最佳和次佳距离不满足阈值比例。理论来说 bestDist/bestDist2 越小越好</span><br>            <span class="hljs-keyword">if</span>(bestLevel==bestLevel2 &amp;&amp; bestDist&gt;mfNNratio*bestDist2)<br>                <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">//保存结果: 为Frame中的特征点增加对应的MapPoint</span><br>            F.mvpMapPoints[bestIdx]=pMP; <br>            nmatches++;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> nmatches;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Tracking类"><a href="#Tracking类" class="headerlink" title="Tracking类"></a>Tracking类</h3><h4 id="TrackLocalMap成员函数"><a href="#TrackLocalMap成员函数" class="headerlink" title="TrackLocalMap成员函数"></a><code>TrackLocalMap</code>成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">以下为伪代码<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Tracking::TrackLocalMap</span><span class="hljs-params">()</span></span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SearchLocalPoints成员函数"><a href="#SearchLocalPoints成员函数" class="headerlink" title="SearchLocalPoints成员函数"></a><code>SearchLocalPoints</code>成员函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++">以下为伪代码<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Tracking::SearchLocalPoints</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">// Step 1：遍历当前帧的地图点，标记这些地图点不参与之后的投影搜索匹配</span><br>    <span class="hljs-keyword">for</span>(vit=mCurrentFrame.mvpMapPoints.<span class="hljs-built_in">begin</span>(); vit!=vend; vit++)<br>    &#123;<br>        MapPoint* pMP = *vit;<br>        <span class="hljs-keyword">if</span>(pMP)<br>        &#123;<br>            <span class="hljs-comment">// 更新能观测到该点的帧数加1(被当前帧观测了)</span><br>            pMP-&gt;<span class="hljs-built_in">IncreaseVisible</span>();<br>            <span class="hljs-comment">// 标记该点被当前帧观测到</span><br>            pMP-&gt;mnLastFrameSeen = mCurrentFrame.mnId;<br>            <span class="hljs-comment">// 标记该点在后面搜索匹配时不被投影，因为已经有匹配了</span><br>            pMP-&gt;mbTrackInView = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> nToMatch=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// Step 2：判断所有局部地图点中除当前帧地图点外的点，是否在当前帧视野范围内</span><br>    <span class="hljs-keyword">for</span>(vit=mvpLocalMapPoints.<span class="hljs-built_in">begin</span>(); vit!=vend; vit++)<br>    &#123;<br>        MapPoint* pMP = *vit;<br><br>        <span class="hljs-comment">// 已经被当前帧观测到的地图点肯定在视野范围内，跳过</span><br>        <span class="hljs-keyword">if</span>(pMP-&gt;mnLastFrameSeen == mCurrentFrame.mnId)<br>            <span class="hljs-keyword">continue</span>;<br>        <br>        <span class="hljs-comment">// 判断地图点是否在在当前帧视野内</span><br>        <span class="hljs-keyword">if</span>(mCurrentFrame.<span class="hljs-built_in">isInFrustum</span>(pMP,<span class="hljs-number">0.5</span>))<br>        &#123;<br>        <span class="hljs-comment">// 观测到该点的帧数加1</span><br>            pMP-&gt;<span class="hljs-built_in">IncreaseVisible</span>();<br>            <span class="hljs-comment">// 只有在视野范围内的地图点才参与之后的投影匹配</span><br>            nToMatch++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Step 3：如果需要进行投影匹配的点的数目大于0，就进行投影匹配，增加更多的匹配关系</span><br>    <span class="hljs-keyword">if</span>(nToMatch&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-function">ORBmatcher <span class="hljs-title">matcher</span><span class="hljs-params">(<span class="hljs-number">0.8</span>)</span></span>;<br>        <span class="hljs-type">int</span> th = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 如果不久前进行过重定位，那么进行一个更加宽泛的搜索，阈值需要增大</span><br>        <span class="hljs-keyword">if</span>(mCurrentFrame.mnId&lt;mnLastRelocFrameId+<span class="hljs-number">2</span>)<br>            th=<span class="hljs-number">5</span>;<br><br>        <span class="hljs-comment">// 投影匹配得到更多的匹配关系</span><br>        matcher.<span class="hljs-built_in">SearchByProjection</span>(mCurrentFrame,mvpLocalMapPoints,th);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/05/hello-world/"/>
    <url>/2024/07/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
